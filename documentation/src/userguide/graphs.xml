<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         version="5.2" xml:id="graphs">
<info>
  <?db filename="graphs"?>
  <title>Pipelines vs. Graphs</title>
</info>

<para>XML Calabash transforms a pipeline into a collection of graphs. It is the
graphs that are evaluated at runtime.</para>

<para>To explore the difference between pipelines and graphs, consider
the example pipeline in <xref linkend="debugger-xpl"/>.</para>

<sidebar>
<title>Unnecessary complexity</title>
<para>The example pipeline in this chapter is straightfoward, but unnecessarily complicated in
order to highlight some of the differences between pipelines and graphs. An
equivalent and more concise version is:</para>
<programlisting language='xml'
><xi:include href="../examples/xpl/simple.xpl" parse="text"/></programlisting>
<para>But that’s not as interesting for this discussion.</para>
</sidebar>

<para>The pipeline declares two steps and uses one additional compound step.</para>

<figure xml:id="debugger-xpl">
<title>Sample debugging pipeline</title>
<programlisting language='xml'
><xi:include href="../examples/xpl/debugger.xpl" parse="text"/></programlisting>
</figure>

<para>The processor analyzes the pipeline (resolves <tag class="attribute">use-when</tag>
attributes, default readable ports, etc.) and constructs two models, one for each pipeline, like the
ones shown in <xref linkend="debugger-pipeline"/>.</para>

<para>You can generate the graphs for any pipeline with the
<option linkend="cli-graphs">--graphs</option> command line option.</para>

<formalgroup xml:id="debugger-pipeline">
<title>The pipeline models</title>
<figure>
<title>The pipeline model</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/debugger-pipeline.svg"/>
</imageobject>
</mediaobject>
</figure>
<figure>
<title>The ex:ident model</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/debugger-exident.svg"/>
</imageobject>
</mediaobject>
</figure>
</formalgroup>

<para>The processor makes some changes in the pipeline. Some occurrences of <tag>p:document</tag>,
<tag>p:inline</tag>, and even <tag>p:option</tag> and <tag>p:variable</tag>, are “promoted”
to steps. This would be burdensome for authoring, but simplifies the implementation.</para>

<para>The processor then analyzes the pipeline to construct a set of graphs.
It’s the actual graphs that gets executed. The graph for this pipeline is
shown in <xref linkend="debugger-model"/>.</para>

<formalgroup xml:id="debugger-model">
<title>The graph models</title>
<figure>
<title>The pipeline graph</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/debugger-graph-pipeline.svg"/>
</imageobject>
</mediaobject>
</figure>
<figure xml:id="exgraph-pipeline-styled">
<title>The ex:ident graph</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/debugger-graph-exident.svg"/>
</imageobject>
</mediaobject>
</figure>
</formalgroup>

<para>Compound steps are represented as separate graphs. They have also grown
“head” and “foot” steps that manage the boundaries.</para>

<section xml:id="graph-styling">
<title>Styling the SVG</title>

<para>The actual SVG diagrams are constructed in several steps. If you run with
the
<option linkend="cli-graphs">--graphs</option> and
<option linkend="cli-debug">--debug</option> options,
all of the intermediate files will be saved in the graph output directory.
The starting point is the pipeline description itself, <filename>pipeline.xml</filename>.
This document contains an XML description of the compiled pipelines and their graphs.
The pipeline description vocabulary is described in <xref linkend="description-reference"/>.
</para>

<para>The graphs are ultimately constructed with Graphviz. The <filename>pipeline.xml</filename>
document is styled, then converted to a number of “<filename class="extension">.dot</filename>” files,
each processed with Graphviz.</para>

<para>The default styling produces results like the one’s you’ve already seen.</para>

<para>In Graphviz terms, each step is
<link xlink:href="https://graphviz.org/doc/info/shapes.html">a node</link>, those are the
nested rectangles,
inside each node is <link xlink:href="https://graphviz.org/doc/info/shapes.html#table">a table</link>,
and <link xlink:href="https://graphviz.org/docs/edges/">edges</link> join them. In particular,
the first and last row of each table contain the inputs and outputs for the step, the “ports” in
Graphviz terminology.</para>

<para>The first 50 or so lines of a pipeline description is shown in <xref
linkend="exgraph-description"/>.</para>

<figure xml:id="exgraph-description">
<title>The description markup for the ex:ident graph</title>
<programlisting language='xml'
><xi:include href="../examples/xml/exgraph-description.xml" parse="text"
             fragid="line=1,50"/></programlisting>
</figure>


<para>Default styling has adding attributes to this markup and “rows” in the
atomic steps. Each <tag>g:detail</tag> element represents a row in the table
and should contain one or more <tag>td</tag> elements.</para>

<caution>
<para>Styling
<emphasis>can</emphasis> also change the structure of the graph, but that risks
creating a graph that doesn’t accurately reflect the structure of the original
pipeline which may be very misleading.</para>
</caution>

<para>Attributes in the “dot” namespace
(<uri>http://xmlcalabash.com/ns/dot</uri>) can be added to supply Graphviz
attributes. Attributes in the “html” namespace can be added to supply the HTML
styling attributes that Graphviz supports. You should use unqualified attribute names
on the “HTML” table elements that appear in the output.
The <link linkend="description-reference">pipeline description vocabulary</link> enumerates
the HTML attributes that (the Graphviz documentation says that) Graphviz understands,
but that’s documentary. The styled document is not validated.</para>

<section>
<title>Default styling</title>

<para>If you don’t <link linkend="cc.graphviz">specify a stylesheet</link>, the pipelines
and graphs are styled with a default stylesheet. The default stylesheet:</para>

<itemizedlist>
<listitem><para>Labels each step with its type and name (if a name was provided).
</para></listitem>
<listitem><para>Puts pipeline inputs and outputs in “house” shapes with fewer borders.
</para></listitem>
<listitem><para>Gives the head and foot elements a paralellogram shape with fewer table borders.
</para></listitem>
<listitem><para>Labels variable and option atomic steps appropriately and adds the variable
name as a detail. If a default expression is provided, that’s also added as a detail.
</para></listitem>
<listitem><para>Adds links between subpipelines and their graphs.
</para></listitem>
<listitem><para>Uses dashed lines for “depends” edges.
</para></listitem>
<listitem><para>Adds “⋮” as a label to edges where the output allows a sequence but the input does not.
</para></listitem>
</itemizedlist>

<para>Despite the earlier admonition about changing the graph structure, the default
style does make one structural change. Any output port that is unconnected is connected to a
“sink” represented as a point.</para>

</section>

<section>
<title>Custom styling</title>

<para>Providing your own stylesheet allows you to achieve any custom styling
that you’d like. Your stylesheet is applied after the standard stylesheet. This gives
you the opportunity to add or remove <tag>g:detail</tag> elements, or to change
the styling of elements.</para>

<para>Your stylesheet is applied to each pipeline and graph separately; this
makes it much easier to manage links between elements. You’ll never accidentally match a
name or ID from a different pipeline or graph. The same custom stylesheet is applied
to both pipelines and graphs; you can distinguish between them by the root element
which will be <tag>g:pipeline-container</tag> for pipelines and <tag>g:graph-container</tag>
for graphs.</para>

<para>Background colors applied to the container elements apply to the entire
“canvas”; background colors on nested elements apply to smaller regions. Note
that if the graph style of an element is “invis” (as it is on graph elements by
default), the background color is ignored.</para>

<para>The stylesheet in <xref linkend="custom-graph-style"/> colors primary inputs and
outputs in pale blue and makes implicit connections gray rather than black.
(The “implicitness” of connections is roughly analogous to when the connection was made
automatically to the default readable port, but it should be taken with a grain of salt; 
compiling a pipeline involves adding, removing, and changing connections for a number of reasons
and it’s not always clear which ones are implicit and which ones aren’t.)
</para>

<figure xml:id="custom-graph-style">
<title>Custom pipeline and graph styling</title>
<programlisting language='xml'
><xi:include href="../examples/xsl/custom-graph-style.xsl" parse="text"/></programlisting>
</figure>

<para>The result of applying custom styling is shown in 
<xref linkend="exgraph-pipeline-custom"/>.</para>

<figure xml:id="exgraph-pipeline-custom">
<title>The ex:ident graph with custom styling</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/debugger-exident-custom.svg"/>
</imageobject>
</mediaobject>
</figure>

</section>
</section>

<section xml:id="description-reference">
<title>Description reference</title>

<para>The XML vocabulary used to describe and style pipelines and graphs
is a bit ad hoc. It started out as an internal format without any serious
documentation. The observation that the graphs are a useful teaching aid
persuaded me to try to make it a little more user friendly.</para>

<para>The pipeline description and the graph description have been made as
similar as possible so that they can be styled more easily. The description
schema doesn’t attempt to be prescriptive; in practice some combinations of
attributes don’t arise, even though they’d be allowed by the schema.
For example, a <tag>cx:document</tag> atomic step may have an 
<tag class="attribute">href</tag> attribute, but no other step type will, nor will
a <tag>cx:document</tag> ever have an <tag class="attribute">expression</tag>.</para>

<para>The format leans heavily on the features of Graphviz. Familiarity with the
Graphviz “dot” model and the way that nodes can be formatted with HTML table
markup will probably be an aid to comprehension.</para>

<para>It’s perhaps a little easier to understand the vocabulary starting from
the center and working out. Most of the interesting markup is in atomic steps.
An atomic step has inputs and outputs, those become table cells in the first and
last rows of the description, respectively. In between the inputs and outputs,
additional rows can be inserted with <tag>g:detail</tag> elements that also
contain table cells. The atomic step container becomes a table. The table is
wrapped in a node.</para>

<para>Compound steps have inputs and outputs and contain one or more atomic or
compound steps.</para>

<para>Edges connect inputs to outputs. Unbound output ports are connected to
“sinks” that appear as simple dots in the graph, rather than boxes.</para>

<tip>
<para>In the descriptions that follow, “dot” and HTML attributes, when they’re
allowed, are abbreviated “<literal>dot:*</literal>” and “<literal>h:*</literal>” to
simplify the summary. The schema actually contains longer enumerations, mostly
because of <link xlink:href="https://github.com/relaxng/jing-trang/issues/287">an
apparent bug</link> in Trang.</para>
</tip>

<section xml:id="g.description">
<title>g:description</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.description"/>
</section>

<section xml:id="g.declare-step">
<title>g:declare-step</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.declare-step"/>

<para>If the <tag class="attribute">filename</tag> is present, it’s the base filename
used for this pipeline.</para>

</section>

<section xml:id="g.input">
<title>g:input</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.input"/>
</section>

<section xml:id="g.output">
<title>g:output</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.output"/>
</section>

<section xml:id="g.detail">
<title>g:detail</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.detail"/>
</section>

<section xml:id="g.head">
<title>g:head</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.head"/>
</section>

<section xml:id="g.foot">
<title>g:foot</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.foot"/>
</section>

<section xml:id="g.inputs">
<title>g:inputs</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.inputs"/>
</section>

<section xml:id="g.outputs">
<title>g:outputs</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.outputs"/>
</section>

<section xml:id="g.port">
<title>g:port</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.port"/>
</section>

<section xml:id="g.atomic-step">
<title>g:atomic-step</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.atomic-step"/>

<para>If the <tag class="attribute">filename</tag> is present, this is a user-defined
step and the filename identifies the declaration for this step.
</para>

</section>

<section xml:id="g.subpipeline">
<title>g:subpipeline</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.subpipeline"/>

<para>A subpipeline is an atomic step that “calls” a compound step.</para>

</section>

<section xml:id="g.compound-step">
<title>g:compound-step</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.compound-step"/>
</section>

<section xml:id="g.edge">
<title>g:edge</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.edge"/>

<para>The only significant attributes on the <tag>g:edge</tag> elements are <tag
class="attribute">from</tag> and <tag class="attribute">to</tag> which must
point to id values on port elements. The other edge attributes are provided
as a convenience for deciding how they should be styled.</para>

</section>

<section xml:id="g.pipeline-container">
<title>g:pipeline-container</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.pipeline-container"/>

</section>

<section xml:id="g.graph-container">
<title>g:graph-container</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.graph-container"/>

</section>

<section xml:id="g.graph">
<title>g:graph</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             name="g.graph"/>

<para>If the <tag class="attribute">filename</tag> is present, it’s the base filename
used for this graph.</para>

</section>

<section xml:id="h.td">
<title>td</title>

<note>
<para>The HTML elements in this summary are explicitly in the HTML namespace.
GraphViz doesn’t really understand XML; you must not specify the namespace declaration
on these elements, nor may you use an explicit prefix.</para>
<para>The attributes in the description are the attributes that the Graphviz documentation
claims are supported.</para>
</note>

<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.td"/>
</section>

<section xml:id="h.font">
<title>font</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.font"/>
</section>

<section xml:id="h.br">
<title>br</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.br"/>
</section>

<section xml:id="h.img">
<title>img</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.img"/>
</section>

<section xml:id="h.i">
<title>i</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.i"/>
</section>

<section xml:id="h.b">
<title>b</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.b"/>
</section>

<section xml:id="h.o">
<title>o</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.o"/>
</section>

<section xml:id="h.sub">
<title>sub</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.sub"/>
</section>

<section xml:id="h.sup">
<title>sup</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.sup"/>
</section>

<section xml:id="h.s">
<title>s</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.s"/>
</section>

<section xml:id="h.hr">
<title>hr</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.hr"/>
</section>

<section xml:id="h.vr">
<title>vr</title>
<rng-pattern schema="../../build/description.rng"
             ns="https://xmlcalabash.com/ns/description"
             suppress-prefix="true"
             name="h.vr"/>
</section>

</section>
</chapter>
