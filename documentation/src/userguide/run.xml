<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         version="5.2" xml:id="running">
<info>
  <?db filename="running"?>
  <title>Running XML Calabash</title>
</info>

<para>The easiest way to run XML Calabash is directly from the jar file:</para>

<screen>java -jar xmlcalabash-<?version?>.jar <replaceable>options…</replaceable></screen>

<para>Run this way, all of the dependencies included in the
<filename class="directory">lib</filename> directory are automatically included on the classpath.</para>

<para>You can also run the main class directly, for example in a build system or
a shell script:</para>

<screen>java com.xmlcalabash.app.Main <replaceable>options…</replaceable></screen>

<para>But if you choose this form, you must ensure that the classpath contains
both the XML Calabash jar file and all of the necessary dependencies.
One feature of the second form is that it allows you to change or update the dependencies.
</para>

<para>In the fullness of time, XML Calabash will be available through Maven which has
extensive features for managing dependencies. In the short term, it’s just a bit messy.</para>

<tip xml:id="upgrading-saxon">
<title>Upgrading Saxon</title>
<para>The one library that you are likely to want to change in Saxon. If you
have a license for Saxon PE or Saxon EE, it makes sense to swap out the Saxon HE
library that ships with XML Calabash for PE or EE.</para>
<para>To save you the trouble of constructing and managing a large classpath, the
alpha distribution of XML Calabash is configured with a hack. Simply
delete the <filename>Saxon-HE-<?version DEPENDENCY_saxon?>.jar</filename> file from the
<filename class="directory">lib</filename> directory and copy in your PE or EE jar instead. You
<emphasis>must</emphasis> use a <?version DEPENDENCY_saxon?> jar file for this purpose!
Be careful to make sure there’s only one Saxon jar file in the 
<filename class="directory">lib</filename> directory. Having multiple versions of the same library on the classpath
is an invitation for subtle and mysterious crashes.</para>
<para>Saxon generally searches for a license file on the classpath, which isn’t going
to work with this hack. Instead, you can use the <envar>SAXON_HOME</envar> environment
variable, as described in
<link xlink:href="https://www.saxonica.com/documentation12/index.html#!about/license/licensekey">the
documentation</link>.</para>
</tip>

<para>Elsewhere in this document, we assume that the command “<command>xmlcalabash</command>”
runs XML Calabash. This can be replaced by the <command>java -jar …</command> version above or
by your own script.</para>

<para>XML Calabash has a command driven command-line interface. It supports
three commands: <command linkend="run-run">run</command>, to run a pipeline;
<command linkend="run-version">version</command>, to print the version, and
<command linkend="run-help">help</command> to display help. If no command is
given, the <command>run</command> command is assumed.</para>

<section xml:id="run-run">
<title>The <literal>run</literal> command</title>

<cmdsynopsis>
  <command>xmlcalabash</command>
  <arg choice="opt">run</arg>
  <arg rep="norepeat" linkend="cli-configuration">--configuration:<replaceable>configuration-file</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-pipe">--pipe</arg>
  <arg rep="repeat" linkend="cli-input">--input:<replaceable>port</replaceable>=<replaceable>uri</replaceable></arg>
  <arg rep="repeat" linkend="cli-output">--output:<replaceable>port</replaceable>=<replaceable>filespec</replaceable></arg>
  <sbr/>
  <arg rep="repeat" linkend="cli-namespace">--namespace:<replaceable>prefix</replaceable>=<replaceable>uri</replaceable></arg>
  <arg rep="repeat" linkend="cli-init">--init:<replaceable>class-name</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-graphs">--graphs:<replaceable>graph-output-directory</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-verbosity">--verbosity:<replaceable>verbosity</replaceable></arg>
  <arg rep="norepeat" linkend="cli-explain">--explain</arg>
  <arg rep="norepeat" linkend="cli-visualizer">--visualizer:<replaceable>name</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-trace">--trace:<replaceable>output-file</replaceable></arg>
  <arg rep="norepeat" linkend="cli-trace-documents">--trace-documents:<replaceable>output-directory</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-assertions">--assertions:<replaceable>level</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-licensed">--licensed</arg>
  <arg rep="norepeat" linkend="cli-debug">--debug</arg>
  <arg rep="norepeat" linkend="cli-debugger">--debugger</arg>
  <arg rep="norepeat" linkend="cli-nogo">--nogo</arg>
  <sbr/>
  <arg rep="repeat" linkend="cli-catalog">--catalog:<replaceable>catalog-file-uri</replaceable></arg>
  <arg rep="repeat" linkend="cli-xml-schema">--xml-schema:<replaceable>xml-schema-file-uri</replaceable></arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-validation-mode">--validation-mode:<replaceable>mode</replaceable></arg>
  <arg rep="norepeat" linkend="cli-try-namespaces">--try-namespaces</arg>
  <arg rep="norepeat" linkend="cli-use-location-hints">--use-location-hints</arg>
  <arg rep="norepeat" linkend="cli-help">--help</arg>
  <sbr/>
  <arg rep="norepeat" linkend="cli-step">--step:<replaceable>step-name</replaceable></arg>
  <arg linkend="cli-pipeline"><replaceable>pipeline.xpl</replaceable></arg>
  <arg rep="repeat" linkend="cli-option"><replaceable>option</replaceable>=<replaceable>value</replaceable></arg>
</cmdsynopsis>

<para>Where the options and arguments are:</para>

<variablelist>
<varlistentry><term><option>run</option>, selects the run command</term>
<listitem>
<para>If the command is omitted, <literal>run</literal> is assumed.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-configuration">
  <term><option>--configuration:<replaceable>configuration-file</replaceable></option>, identifies
  a configuration file</term>
<listitem>
<para>When XML Calabash begins, it reads configuration settings from
<link linkend="configuration">a configuration file</link>. If you don’t specify
a configuration file, it will search first for <filename>.xmlcalabash3</filename> in the current
directory and then in your home directory.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-pipe">
  <term><option>--pipe<replaceable>:boolean</replaceable></option>, sets piped mode</term>
<listitem>
<para>If piped mode is enabled, XML Calabash
will behave like a Unix pipeline. If there is no binding for the primary input port, it will
read it from standard input. If there is no binding for the primary output port, it will
write it to standard output. If not specified, the default setting comes from
the <option linkend="cc.xml-calabash">piped-io</option> configuration setting.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-input">
  <term><option>--input:<replaceable>port</replaceable>=<replaceable>uri</replaceable></option>, identifies
  an input</term>
<listitem>
<para>This option associates the resource identified by the <replaceable>uri</replaceable> with
the input port named <replaceable>port</replaceable>. If the <option>--input</option> option
is repeated for the same <replaceable>port</replaceable>, the resources become a sequence of
documents on that port, in the order specified.</para>
<para>The pipeline must have an input port named <replaceable>port</replaceable>.</para>
<para>If the input <replaceable>uri</replaceable> provided is “<literal>-</literal>”, input
will be read from standard input. When standard input is read, it will be parsed
as the (first) content type listed on the named input port. It will be parsed
as XML if the input port doesn’t specify any content types.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-output">
  <term><option>--output:<replaceable>port</replaceable>=<replaceable>filespec</replaceable></option>, identifies
  an output</term>
<listitem>
<para>In the simplest case, at most one document appears on the output <replaceable>port</replaceable>
and <replaceable>filespec</replaceable> is just a filename. The <replaceable>filespec</replaceable> can
also be a template.
The output documents are numbered, starting at 1. Within the <replaceable>filespec</replaceable>,
the string “<literal>%d</literal>” will be replaced by the document number.
(The string “<literal>%h</literal>” will be replaced by the document number in hexadecimal and
“<literal>%o</literal>” will be replaced by the document number in octal, for no good reason.)
Zeros can be added to pad the value, “<literal>%00d</literal>” will produce a document number
that is at least two digits long, padded on the left with 0’s if there are fewer than 10 documents.
For completeness, a literal “%” can be added to the filename with “<literal>%%</literal>”
in the <replaceable>filespec</replaceable>.</para>
<para>If the <replaceable>filespec</replaceable> does not contain a number template, then all
of the outputs on the port will be concatenated to the same file.
You may not repeat the <option>--output</option> option for the same port.</para>
<para>The pipeline must have an output port named <replaceable>port</replaceable>.</para>

<para>If the output <replaceable>filespec</replaceable> provided is “<literal>-</literal>”, output
from that port will be written to standard output. At most one output port may be explicitly bound
to standard output.</para>

<para>In piped mode, at most one port will write to standard output. If there is no explicit
binding to standard output, the primary output port writes to standard output. If the primary
output port is bound to some other output, no output will be sent to standard output.</para>

<para>If piped mode is not enabled, and no port is explicitly bound to standard
output, the pipeline will write the output from all otherwise unbound output
ports to standard output. If standard output appears to be going to a terminal
window:</para>

<itemizedlist>
<listitem>
<para>A header is printed before the output identifying the port name, document
number, and base URI.</para>
</listitem>
<listitem>
<para>A line of equal signs is printed as a separator between documents (if more than
one document is output).</para>
</listitem>
<listitem>
<para>When XML or HTML content is output, the XML declaration is omitted.</para>
</listitem>
<listitem>
<para>Indentation is turned on.</para>
</listitem>
</itemizedlist>

<para>The method for determining whether output is going to a terminal or being
redirected isn’t terribly sophisticated and may be wrong in some
circumstances. It’s safer to use <option>--output</option> to write to a file
if you want to save the output or enable piped mode.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-namespace">
  <term><option>--namespace:<replaceable>prefix</replaceable>=<replaceable>uri</replaceable></option>,
  identifies a namespace binding</term>
<listitem>
<para>Binds the specified <replaceable>prefix</replaceable> to the <replaceable>uri</replaceable>.
This has no effect on the pipeline; these bindings are only used when evaluating
the <option linkend="cli-step">--step</option> option and in
expressions used to define <phrase linkend="cli-option">options</phrase>.
</para>

<para>The default namespace bindings on the command line are:</para>

<informaltable>
<tgroup cols="2">
<colspec colwidth="1*"/>
<colspec colwidth="5*"/>
<thead>
  <row><entry>Prefix</entry><entry>Namespace URI</entry></row>
</thead>
<tbody>
  <row><entry><literal>array</literal></entry><entry><uri>http://www.w3.org/2005/xpath-functions/array</uri></entry></row>
  <row><entry><literal>cx</literal></entry><entry><uri>http://xmlcalabash.com/ns/extensions</uri></entry></row>
  <row><entry><literal>fn</literal></entry><entry><uri>http://www.w3.org/2005/xpath-functions</uri></entry></row>
  <row><entry><literal>map</literal></entry><entry><uri>http://www.w3.org/2005/xpath-functions/map</uri></entry></row>
  <row><entry><literal>math</literal></entry><entry><uri>http://www.w3.org/2005/xpath-functions/math</uri></entry></row>
  <row><entry><literal>p</literal></entry><entry><uri>http://www.w3.org/ns/xproc</uri></entry></row>
  <row><entry><literal>saxon</literal></entry><entry><uri>http://saxon.sf.net/</uri></entry></row>
  <row><entry><literal>xs</literal></entry><entry><uri>http://www.w3.org/2001/XMLSchema</uri></entry></row>
</tbody>
</tgroup>
</informaltable>

<para>The <option>--namespace</option> option can add to, or change, these bindings.</para>

</listitem>
</varlistentry>

<varlistentry xml:id="cli-init">
  <term><option>--init:<replaceable>class-name</replaceable></option>,
  Saxon configuration initializer</term>
<listitem>
<para>Attempts to load and execute the class named <replaceable>class-name</replaceable>, which
must be available on the class path and must implement the <classname>net.sf.saxon.lib.Initializer</classname>
interface. (This is analagous to the <literal>-init:</literal> option on the Saxon command line
API.)
</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-graphs">
  <term><option>--graphs:<replaceable>graph-output-directory</replaceable></option>, SVG graph outputs</term>
<listitem>
<para>This option writes hyperlinked SVG descriptions of pipelines, and their <link
linkend="graphs">corresponding graphs</link>, to the
<replaceable>graph-output-directory</replaceable>. The descriptions are “boxes and arrows”
diagrams of the connections between the steps. One SVG diagram is produced for each declared
pipeline and its corresponding graph. An HTML index in the
<replaceable>graph-output-directory</replaceable> makes them easy to browse.
See <xref linkend="graphs"/> for more details.</para>
<para>The processor assumes that it “owns” the
<replaceable>graph-output-directory</replaceable>; it will erase files and directories
before creating the graph output.</para>
<note>
<para>Some browsers have better support for SVG than others. If the diagrams are difficult
to view, or if links don’t work correctly, a good first step is to try a different
browser.</para>
</note>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-verbosity">
  <term><option>--verbosity:<replaceable>verbosity</replaceable></option></term>
<listitem>
<para>There are five levels of verbosity. The level of verbosity determines how much
detail is printed about the progress of a running pipeline.</para>
<variablelist>
<varlistentry>
<term><literal>trace</literal></term>
<listitem><para>Lots of detail, show everything.</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>debug</literal></term>
<listitem><para>Lots of detail</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>info</literal></term>
<listitem><para>Show relevant status messages.</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>warn</literal></term>
<listitem><para>Show only warnings and errors.</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>error</literal></term>
<listitem><para>No messages except fatal errors</para></listitem>
</varlistentry>
</variablelist>
<para>Setting the verbosity also sets the logging level.
</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-explain">
  <term><option>--explain</option>, explain errors</term>
<listitem>
<para>Enables error explanations. If error explanations are enabled, when a
pipeline fails, in addition to the error message, a short explanation of the
cause will be provided.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-visualizer">
  <term><option>--visualizer:<replaceable>name</replaceable></option></term>
<listitem>
<para>Selects a visualizer for reporting pipeline progress. There are three defined visualizers.</para>
<variablelist>
<varlistentry>
<term><literal>silent</literal></term>
<listitem><para>Shows no progress reports.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>plain</literal></term>
<listitem><para>Reports the name of each step when it begins running.
Most steps manufactured automatically during graph construction are
omitted. There is one option, <literal>indent</literal> which
determines whether or not, and to what extent, reports are indented when
they are nested inside compound steps.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>detail</literal></term>
<listitem><para>Reports the name of each step and may report on the documents produced.
</para>
<para>If the <literal>steps</literal> option is <literal>true</literal>,
the progress of steps is recorded. (Defaults to true.)</para>
<para>If the <literal>documents</literal> option is <literal>true</literal>,
the documents produced during execution are recorded. (Defaults to false.)</para>
</listitem>
</varlistentry>
</variablelist>

<para>Options can be specified on the command line as <literal>key=value</literal> pairs
after the name. The name and any options are separated by a question mark (<literal>?</literal>).
Key-value pairs are separted by semicolons (<literal>;</literal>).
For example: <literal>--visualizer=detail?steps=true;documents=true</literal>.</para>

</listitem>
</varlistentry>

<varlistentry xml:id="cli-trace">
  <term><option>--trace:<replaceable>output-file</replaceable></option>, defines a runtime trace file</term>
<listitem>
<para>A runtime trace of the pipeline execution will be written to
<filename><replaceable>output-file</replaceable></filename>.
(If the <option>--trace-documents</option> option is given but the 
<option>--trace</option> option is not, the default output file is
named <filename>trace.xml</filename> in the 
<option>--trace-documents</option> output directory.)
</para>
<para>For more information about tracking, see <xref linkend="tracing"/>.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-trace-documents">
  <term><option>--trace-documents:<replaceable>output-directory</replaceable></option>, defines a
runtime trace directory</term>
<listitem>
<para>If the <option>--trace-documents</option> option is given, the runtime trace will
write a copy of every document that flows through the pipeline into the specified
directory. These documents are identified in the <option>--trace</option> file.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-assertions">
  <term><option>--assertions:<replaceable>level</replaceable></option></term>
<listitem>
<para>By default, assertions are disabled. You can enable them by setting
an appropriate level:</para>
<variablelist>
<varlistentry>
<term><literal>error</literal></term>
<listitem><para>Schematron reports are output and Schematron errors
are treated as errors. (They cause the step to throw
<code>Q{http://xmlcalabash.com/ns/error}XI0041</code>.)</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>warning</literal> (or <literal>warn</literal>)</term>
<listitem><para>Schematron reports are output and Schematron errors
are treated as warnings.</para></listitem>
</varlistentry>
<varlistentry>
<term><literal>ignore</literal></term>
<listitem><para>Assertions are ignored.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-licensed">
  <term><option>--licensed</option></term>
<listitem>
<para>Requests a licensed processor. In practice, a licensed processor is used
by default, if one is available. However, <option>--licensed:false</option> can be used
to explicitly request an <emphasis>unlicensed</emphasis> processor when Saxon PE or
Saxon EE are on the classpath.</para>
<para>Schema-aware processing requires Saxon EE and a valid Saxon license.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-debug">
  <term><option>--debug</option></term>
<listitem>
<para>If debugging is enabled, the verbosity is set to at least the
<literal>debug</literal> level <emphasis>and</emphasis> the backend logging
framework’s “log level” is set to the verbosity.</para>
<para>This produces a lot of messages, typically on the standard error
output. XML Calabash uses <link xlink:href="https://www.slf4j.org/">SLF4J</link>
and <link xlink:href="https://logback.qos.ch/">Logback</link> for logging.
You can configure it in the usual ways.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-debugger">
  <term><option>--debugger</option></term>
<listitem>
<para>Start an interactive debugging session on the pipeline.
See <xref linkend="debugging"/>.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-nogo">
  <term><option>--nogo</option></term>
<listitem>
<para>Compile the pipeline, and produce graphs if they’re requested, but don’t actually
run the pipeline.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-catalog">
  <term><option>--catalog:<replaceable>catalog-file-uri</replaceable></option></term>
<listitem>
<para>Adds the specified catalog to the list of XML Catalogs that are used 
during resource resolution.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="cli-xml-schema">
  <term><option>--xml-schema:<replaceable>xml-schema-file-uri</replaceable></option></term>
<listitem>
<para>Adds the specified XML Schema to the validation context. This schema will
be available in both <link linkend="implicit-validation">implicit validation</link> and
when the <tag>p:validate-with-xml-schema</tag> step is used.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="cli-validation-mode">
  <term><option>--validation-mode:<replaceable>mode</replaceable></option></term>
<listitem>
<para>This option enables <link linkend="implicit-validation">implicit validation</link>.
The mode must be either “lax” or “strict”.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="cli-try-namespaces">
  <term><option>----try-namespaces</option></term>
<listitem>
<para>This option enables attempting to retrieve a schema using its namespace URI
during <link linkend="implicit-validation">implicit validation</link>.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="cli-use-location-hints">
  <term><option>--use-location-hints</option></term>
<listitem>
<para>This option enables attempting to retrieve a schema using location hints
during <link linkend="implicit-validation">implicit validation</link>.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="cli-help">
  <term><option>--help</option></term>
<listitem>
<para>This is equivalent to issuing the <command linkend="run-help">help</command> command.
It’s provided as an option for convenience.
</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-step">
  <term><option>--step:<replaceable>step</replaceable></option>, identifies a step</term>
<listitem>
<para>The <option>--step</option> option is a little bit overloaded. Its interpretation
depends on whether or not <link linkend="cli-pipeline">a pipeline</link> is specified.
</para>

<para>If a pipeline is specified, it must identify a <tag>p:library</tag>. The value of the
<option>--step</option> option is interpreted as the <emphasis>name</emphasis> of a step in
that library. The named step will be run.</para>

<para>For example:</para>

<screen><prompt>$ </prompt><userinput>xmlcalabash --step:helloWorld --library:examples.xpl …</userinput></screen>

<para>If no pipeline is specified, the value of the <option>--step</option>
option is interpreted as the <emphasis>type</emphasis> of a step. The (atomic)
step with the specified type will be run. All of the inputs, outputs, and options
specified apply to that step.</para>

<para>For example:</para>

<screen><prompt>$ </prompt><userinput>xmlcalabash --step:p:xslt …</userinput></screen>

<para>The <literal>p</literal> and <literal>cx</literal> namespaces are bound by default.
The <option linkend="cli-namespace">--namespace</option> option can be
used to change the namespace bindings.</para>

</listitem>
</varlistentry>

<varlistentry xml:id="cli-pipeline">
  <term><option><replaceable>pipeline.xpl</replaceable></option>, the pipeline to run</term>
<listitem>
<para>This identifies the pipeline to run. If the root element is 
<tag>p:declare-step</tag>, then that pipeline will be run. If the root element is
<tag>p:library</tag>, the first pipeline in the library will be run, unless the
<option linkend="cli-step">step</option> option specifies an alternate pipeline.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="cli-option">
  <term><option><replaceable>option</replaceable>=<replaceable>value</replaceable></option>, sets an option</term>
<listitem>
<para>You can provide values for pipeline options on the command line. These override any defaults
declared in the pipeline. There must be a pipeline option named <replaceable>option</replaceable>.</para>

<para>The option name can be an EQName or it can use a prefix
previously defined with <option linkend="cli-namespace">--namespace</option>; if the option is a simple
<type>NCName</type>, it is not in a namespace.</para>
<para>If the <replaceable>value</replaceable> begins with “?”, what follows is taken to be
an XPath expression. That expression is evaluated using the namespace bindings defined. The
context item is undefined. The result of evaluating the expression is the value of the option.
If the <replaceable>value</replaceable> does not begin with a “?”, the whole string
becomes the value as an <type>xs:untypedAtomic</type>.</para>

<para>If multiple assignments to the same <option>option</option>
appear, the option’s value will be a sequence with those values in the order
specified.</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="run-help">
<title>The <literal>help</literal> command</title>

<cmdsynopsis>
  <command>xmlcalabash</command>
  <arg choice="plain">help</arg>
</cmdsynopsis>

<para>Displays a short summary of the command line options and arguments, not
dissimilar to the preceding section. If help is requested, all of the other
command line arguments are ignored.</para>
</section>

<section xml:id="run-version">
<title>The <literal>version</literal> command</title>

<cmdsynopsis>
  <command>xmlcalabash</command>
  <arg choice="plain">version</arg>
  <arg rep="norepeat" linkend="cli-verbosity">--verbosity:<replaceable>verbosity</replaceable></arg>
</cmdsynopsis>

<para>Displays the XML Calabash version and the version of Saxon:</para>

<screen><userinput><prompt>$</prompt> xmlcalabash version</userinput>
<computeroutput>XML Calabash version <?version?> (build <?version build-id?>, <?version build-date display?>)
Running with Saxon <?version saxon-edition?> version <?dep saxon?></computeroutput></screen>

<para>Most options are ignored when the <command>version</command> command is
used, but if the <literal>debug</literal> level of <option>--verbosity</option>
is requested, the version summary will include details about third party
dependencies such as the HTML parser and XML resolver. In this case, the output
is formatted in a way that can more easily be parsed, for example by a shell script.</para>

<screen><userinput><prompt>$</prompt> xmlcalabash --debug</userinput>
<computeroutput>PRODUCT_NAME=XML Calabash
VERSION=<?version VERSION?>
BUILD_DATE=<?version BUILD_DATE?>
BUILD_ID=<?version BUILD_ID?>
SAXON_EDITION=<?version SAXON_EDITION?>
VENDOR_NAME=Norm Tovey-Walsh
VENDOR_URI=https://xmlcalabash.com/
DEPENDENCY_brotliDec=<?version DEPENDENCY_brotliDec?>
DEPENDENCY_commonsCodec=<?version DEPENDENCY_commonsCodec?>
DEPENDENCY_commonsCompress=<?version DEPENDENCY_commonsCompress?>
DEPENDENCY_flexmarkAll=<?version DEPENDENCY_flexmarkAll?>
DEPENDENCY_graalvmJS=<?version DEPENDENCY_graalvmJS?>
DEPENDENCY_htmlparser=<?version DEPENDENCY_htmlparser?>
DEPENDENCY_httpClient=<?version DEPENDENCY_httpClient?>
DEPENDENCY_jing=<?version DEPENDENCY_jing?>
DEPENDENCY_jsonSchemaValidator=<?version DEPENDENCY_jsonSchemaValidator?>
DEPENDENCY_saxon=<?version DEPENDENCY_saxon?>
DEPENDENCY_schxslt2=<?version DEPENDENCY_schxslt2?>
DEPENDENCY_sinclude=<?version DEPENDENCY_sinclude?>
DEPENDENCY_slf4j=<?version DEPENDENCY_slf4j?>
DEPENDENCY_tukaaniXz=<?version DEPENDENCY_tukaaniXz?>
DEPENDENCY_uuidCreator=<?version DEPENDENCY_uuidCreator?>
DEPENDENCY_xercesImpl=<?version DEPENDENCY_xercesImpl?>
DEPENDENCY_xmlResolver=<?version DEPENDENCY_xmlResolver?></computeroutput></screen>

<important>
<para>These are the <emphasis>compile-time</emphasis> dependencies, the versions that
the processor <emphasis>expected</emphasis>. The versions actually used are controlled by what appears on 
the classpath at runtime.</para>
</important>
</section>
</chapter>
