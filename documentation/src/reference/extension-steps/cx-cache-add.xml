<refentry xmlns:p="http://www.w3.org/ns/xproc"
          xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns="http://docbook.org/ns/docbook"
          xml:id="cx-cache-add">
<?db filename="cx-cache-add"?>
<refnamediv>
  <refname>cx:cache-add</refname>
  <refpurpose>Adds documents to the runtime cache</refpurpose>
</refnamediv>

<refsynopsisdiv>
<refsection role="introduction">
<title>Introduction</title>
<para>XML Calabash maintains a cache of documents. This step adds a document to
the cache.</para>
</refsection>

<refsection role="step-declaration">
<title>Step declaration</title>
<xi:include href="../../../../ext/cache/src/main/resources/com/xmlcalabash/ext/cache.xpl"
            xpointer="xpath(/*/*[@type='cx:cache-add'])"/>
<?import cache.xpl?>
</refsection>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>XML Calabash maintains a document cache while the pipeline is running. The
<tag>cx:cache-add</tag> allows a pipeline author to explicitly add a document to
the cache. Some steps use the cache implicitly (for example, the validate steps
update it to hold schema documents). When a request is made for a document (by a
step, by one of the URI resolvers, etc.), if it appears in the cache, a cached document
will be returned.</para>

<para>The cache has two levels. At the top level, a URI maps to a second level
cache that maps from content types to documents. In this way, the cache can
contain different representations for the same URI provided that they have
different content types.</para>

<para>The processor uses the combination of a URI and a content type to locate
documents in the cache. If an exact content type match is found
for a URI, that document is returned. If there isn’t an exact match, the cache
tries to return a document of the right “type”: an XML document for an XML content type,
a text document for a text content type, etc. If there’s no type match at all, an arbitrary
document will be returned.</para>

<para>If the <option>href</option> option is provided, it is used as the URI for
caching, otherwise the <port>source</port> document URI is used.
<error code="I0030">It is a
<glossterm>dynamic error</glossterm> if the <port>source</port> document does not have
a base URI and the <option>href</option> option is not provided.</error>
</para>

<para>Irrespective of the cache URI, the step simply copies its <port>source</port>
document to the <port>result</port> port. (It does not change the document’s base URI,
even if an <option>href</option> option is provided to the <tag>cx:cache-add</tag> step.)</para>

<para><error code="I0037">It is a <glossterm>dynamic error</glossterm> if the
<option>fail-if-in-cache</option> option is <literal>true</literal> and the
cache already contains a document with the URI being cached.</error></para>

<para>A pipeline author can remove documents from the cache with <tag>cx:cache-delete</tag>.
</para>

<refsection>
<title>Options</title>

<para>There are two  options.</para>

<variablelist>
<varlistentry><term><option>href</option></term>
<listitem>
<para>The URI to cache. Defaults to the <port>source</port> document URI.</para>
</listitem>
</varlistentry>
<varlistentry><term><option>fail-if-in-cache</option></term>
<listitem>
<para>Determines whether the URI must not already exist in the cache.</para>
</listitem>
</varlistentry>
</variablelist>
</refsection>

<refsection>
<title>Document properties</title>

<para>No properties are changed.</para>
</refsection>
</refsection>
</refentry>
