<refentry xmlns:p="http://www.w3.org/ns/xproc"
          xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns="http://docbook.org/ns/docbook"
          xml:id="cx-pipeline-messages">
<?db filename="cx-pipeline-messages"?>
<refnamediv>
  <refname>cx:pipeline-messages</refname>
  <refpurpose>Accesses pipeline message output</refpurpose>
</refnamediv>
<refsynopsisdiv>
<refsection role="introduction">
<title>Introduction</title>
<para>XML Calabash maintains a buffer of messages generated by the pipeline.
This step gives the pipeline access to those messages.</para>
</refsection>

<refsection role="step-declaration">
<title>Step declaration</title>
<xi:include href="../../../../ext/pipeline-messages/src/main/resources/com/xmlcalabash/ext/pipeline-messages.xpl"
            xpointer="xpath(/*/*[@type='cx:pipeline-messages'])"/>
<?import pipeline-messages.xpl?>
</refsection>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>XML Calabash message buffer includes both the messages generated by the
pipeline itself, as well as the messages generated by steps. For example,
<tag>xsl:message</tag> output that occurs when running the <tag>p:xslt</tag> step
appears in the buffer.</para>

<para>A pipeline can access the messages with the <tag>cx:pipeline-messages</tag> step.
This step returns all of the messages in the buffer as a
<code xml:id="cx.messages">cx:messages</code> document.

<!--
</para>
<rng-pattern schema="../../build/pipeline-messages.rng"
             name="cx.messages" format="table"/>
<para>
-->

Each message appears in a <code xml:id="cx.message">cx:message</code>
element.</para>

<rng-pattern schema="../../build/pipeline-messages.rng"
             name="cx.message" format="table"/>

<para>By default, XML Calabash keeps a buffer of the last 32 messages.
If the <option>clear</option> option is <literal>true</literal>, the message
buffer will be discarded after returning the messages.</para>

<para>The <tag>cx:pipeline-messages</tag> step has no inputs. It will almost
certainly be necessary to use
<tag xlink:href="https://spec.xproc.org/master/head/xproc/#depends" class="attribute">depends</tag>
to control when the step runs. (A step with no inputs and no dependencies is likely
to run very early, perhaps before any messages have even been generated.)</para>

</refsection>

<refsection>
<title>Examples</title>

<para>Hereâ€™s a short pipeline that applies an identity transform using
<tag>p:xslt</tag>.</para>

<programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../examples/xpl/messages.xpl" parse="text"/></programlisting>

<para>Observe how the <tag>xsl:message</tag> appears in the
pipeline messages:</para>

<programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../build/examples/results/messages.xml" parse="text"/></programlisting>

</refsection>
</refentry>
