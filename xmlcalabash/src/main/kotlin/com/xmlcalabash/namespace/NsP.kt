package com.xmlcalabash.namespace

import net.sf.saxon.om.NamespaceUri
import net.sf.saxon.s9api.QName

object NsP {
    val namespace: NamespaceUri = NamespaceUri.of("http://www.w3.org/ns/xproc")

    val `if`                        = QName(namespace, "p:if")
    val `try`                       = QName(namespace, "p:try")
    val `when`                      = QName(namespace, "p:when")
    val addAttribute                = QName(namespace, "p:add-attribute")
    val addXmlBase                  = QName(namespace, "p:add-xml-base")
    val archive                     = QName(namespace, "p:archive")
    val archiveManifest             = QName(namespace, "p:archive-manifest")
    val atomicStep                  = QName(namespace, "p:atomic-step")
    val castContentType             = QName(namespace, "p:cast-content-type")
    val catch                       = QName(namespace, "p:catch")
    val choose                      = QName(namespace, "p:choose")
    val compare                     = QName(namespace, "p:compare")
    val compress                    = QName(namespace, "p:compress")
    val count                       = QName(namespace, "p:count")
    val cssFormatter                = QName(namespace, "p:css-formatter")
    val declareStep                 = QName(namespace, "p:declare-step")
    val delete                      = QName(namespace, "p:delete")
    val depends                     = QName(namespace, "p:depends")
    val directoryList               = QName(namespace, "p:directory-list")
    val document                    = QName(namespace, "p:document")
    val documentProperties          = QName(namespace, "p:document-properties")
    val documentPropertiesDocument  = QName(namespace, "p:document-properties-document")
    val documentProperty            = QName(namespace, "p:document-property")
    val documentation               = QName(namespace, "p:documentation")
    val empty                       = QName(namespace, "p:empty")
    val episode                     = QName(namespace, "p:episode")
    val error                       = QName(namespace, "p:error")
    val exec                        = QName(namespace, "p:exec")
    val expandText                  = QName(namespace, "p:expand-text")
    val fileCreateTempfile          = QName(namespace, "p:file-create-tempfile")
    val fileCopy                    = QName(namespace, "p:file-copy")
    val fileDelete                  = QName(namespace, "p:file-delete")
    val fileInfo                    = QName(namespace, "p:file-info")
    val fileMkdir                   = QName(namespace, "p:file-mkdir")
    val fileMove                    = QName(namespace, "p:file-move")
    val fileTouch                   = QName(namespace, "p:file-touch")
    val filter                      = QName(namespace, "p:filter")
    val finally                     = QName(namespace, "p:finally")
    val forEach                     = QName(namespace, "p:for-each")
    val functionLibraryImportable   = QName(namespace, "p:function-library-importable")
    val group                       = QName(namespace, "p:group")
    val hash                        = QName(namespace, "p:hash")
    val httpRequest                 = QName(namespace, "p:http-request")
    val index                       = QName(namespace, "p:index")
    val identity                    = QName(namespace, "p:identity")
    val import                      = QName(namespace, "p:import")
    val importFunctions             = QName(namespace, "p:import-functions")
    val inline                      = QName(namespace, "p:inline")
    val inlineExpandText            = QName(namespace, "p:inline-expand-text")
    val input                       = QName(namespace, "p:input")
    val insert                      = QName(namespace, "p:insert")
    val iterationPosition           = QName(namespace, "p:iteration-position")
    val iterationSize               = QName(namespace, "p:iteration-size")
    val ixml                        = QName(namespace, "p:ixml")
    val jsonJoin                    = QName(namespace, "p:json-join")
    val jsonMerge                   = QName(namespace, "p:json-merge")
    val labelElements               = QName(namespace, "p:label-elements")
    val library                     = QName(namespace, "p:library")
    val load                        = QName(namespace, "p:load")
    val locale                      = QName(namespace, "p:locale")
    val makeAbsoluteUris            = QName(namespace, "p:make-absolute-uris")
    val markdownToHtml              = QName(namespace, "p:markdown-to-html")
    val message                     = QName(namespace, "p:message")
    val namespaceDelete             = QName(namespace, "p:namespace-delete")
    val namespaceRename             = QName(namespace, "p:namespace-rename")
    val option                      = QName(namespace, "p:option")
    val osExec                      = QName(namespace, "p:os-exec")
    val osInfo                      = QName(namespace, "p:os-info")
    val otherwise                   = QName(namespace, "p:otherwise")
    val output                      = QName(namespace, "p:output")
    val pack                        = QName(namespace, "p:pack")
    val pipe                        = QName(namespace, "p:pipe")
    val pipeinfo                    = QName(namespace, "p:pipeinfo")
    val productName                 = QName(namespace, "p:product-name")
    val productVersion              = QName(namespace, "p:product-version")
    val psviSupported               = QName(namespace, "p:psvi-supported")
    val rename                      = QName(namespace, "p:rename")
    val replace                     = QName(namespace, "p:replace")
    val run                         = QName(namespace, "p:run")
    val runInput                    = QName(namespace, "p:run-input")
    val runOption                   = QName(namespace, "p:run-option")
    val setAttributes               = QName(namespace, "p:set-attributes")
    val setProperties               = QName(namespace, "p:set-properties")
    val sink                        = QName(namespace, "p:sink")
    val sleep                       = QName(namespace, "p:sleep")
    val splitSequence               = QName(namespace, "p:split-sequence")
    val stepAvailable               = QName(namespace, "p:step-available")
    val stringReplace               = QName(namespace, "p:string-replace")
    val store                       = QName(namespace, "p:store")
    val textCount                   = QName(namespace, "p:text-count")
    val textHead                    = QName(namespace, "p:text-head")
    val textJoin                    = QName(namespace, "p:text-join")
    val textReplace                 = QName(namespace, "p:text-replace")
    val textSort                    = QName(namespace, "p:text-sort")
    val textTail                    = QName(namespace, "p:text-tail")
    val systemProperty              = QName(namespace, "p:system-property")
    val timeout                     = QName(namespace, "p:timeout")
    val unarchive                   = QName(namespace, "p:unarchive")
    val uncompress                  = QName(namespace, "p:uncompress")
    val unwrap                      = QName(namespace, "p:unwrap")
    val urify                       = QName(namespace, "p:urify")
    val useWhen                     = QName(namespace, "p:use-when")
    val uuid                        = QName(namespace, "p:uuid")
    val validateWithDTD             = QName(namespace, "p:validate-with-dtd")
    val validateWithNVDL            = QName(namespace, "p:validate-with-nvdl")
    val validateWithRelaxNG         = QName(namespace, "p:validate-with-relax-ng")
    val validateWithSchematron      = QName(namespace, "p:validate-with-schematron")
    val validateWithXmlSchema       = QName(namespace, "p:validate-with-xml-schema")
    val validateWithJsonSchema      = QName(namespace, "p:validate-with-json-schema")
    val variable                    = QName(namespace, "p:variable")
    val vendor                      = QName(namespace, "p:vendor")
    val vendorUri                   = QName(namespace, "p:vendor-uri")
    val version                     = QName(namespace, "p:version")
    val versionAvailable            = QName(namespace, "p:version-available")
    val viewport                    = QName(namespace, "p:viewport")
    val withInput                   = QName(namespace, "p:with-input")
    val withOption                  = QName(namespace, "p:with-option")
    val withOutput                  = QName(namespace, "p:with-output")
    val wrap                        = QName(namespace, "p:wrap")
    val wrapSequence                = QName(namespace, "p:wrap-sequence")
    val wwwFormUrldecode            = QName(namespace, "p:www-form-urldecode")
    val wwwFormUrlencode            = QName(namespace, "p:www-form-urlencode")
    val xinclude                    = QName(namespace, "p:xinclude")
    val xpathVersion                = QName(namespace, "p:xpath-version")
    val xpathVersionAvailable       = QName(namespace, "p:xpath-version-available")
    val xquery                      = QName(namespace, "p:xquery")
    val xslFormatter                = QName(namespace, "p:xsl-formatter")
    val xslt                        = QName(namespace, "p:xslt")
}